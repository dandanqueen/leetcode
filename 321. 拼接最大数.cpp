class Solution {
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
    	int size1 = nums1.size(), size2 = nums2.size(), maxi, maxj, max1, max2;
    	vector<int> nums3(k);
    	vector<vector<int>> dp1(size1), dp2(size2), dp(size1+1), point((size1+1)*(size2+1));
    	for (int i=0; i<size1; i++){
    		dp1[i].resize(size1);
    		dp1[i][i] = i;
    		for (int j=i+1; j<size1; j++)
    			dp1[i][j] = nums1[j] > nums1[dp1[i][j-1]] ? j : dp1[i][j-1];
    	}
    	for (int i=0; i<size2; i++){
    		dp2[i].resize(size2);
    		dp2[i][i] = i;
    		for (int j=i+1; j<size2; j++)
    			dp2[i][j] = nums2[j] > nums2[dp2[i][j-1]] ? j : dp2[i][j-1];
    	}
    	for (int i=0; i<=size1; i++)
    		dp[i].resize(size2+1);
    	for (int i=0; i<(size1+1)*(size2+1); i++)
    		point[i].resize(2);
    	point[0][0] = point[0][1] = 0;
    	for (int m=0,n,i=0,j=1,t; m<k; m++){
    		t=j;
    		while(i < t){
       			max1 = max2 = -1;
       			n = (k-m-1)-(size2-point[i][1]) < 0 ? 0 : (k-m-1)-(size2-point[i][1]);
       			if (point[i][0] < size1-n){
       				max1 = nums1[dp1[point[i][0]][size1-n-1]];
       				maxi = dp1[point[i][0]][size1-n-1];
       			}
       			n = (k-m-1)-(size1-point[i][0]) < 0 ? 0 : (k-m-1)-(size1-point[i][0]);
       			if (point[i][1] < size2-n){
       				max2 = nums2[dp2[point[i][1]][size2-n-1]];
       				maxj = dp2[point[i][1]][size2-n-1];
       			}
       			if (max1 >= nums3[m] || max2 >= nums3[m]){
       				if (max1 > nums3[m] || max2 > nums3[m])
       					j = t;
       				if (max1 > max2){
       					if (max1 > nums3[m] || !dp[maxi+1][point[i][1]]){
       						point[j][0] = maxi+1;
       						point[j][1] = point[i][1];
       						j++;
       						dp[maxi+1][point[i][1]] = 1;
       					}
	       				nums3[m] = max1;
	       			}
	       			else if (max2 > max1){
	       				if (max2 > nums3[m] || !dp[point[i][0]][maxj+1]){
	       					point[j][0] = point[i][0];
       						point[j][1] = maxj+1;
       						j++;
       						dp[point[i][0]][maxj+1] = 1;
	       				}
	       				nums3[m] = max2;
	       			}
	       			else{
	       				if (max1 > nums3[m] || !dp[maxi+1][point[i][1]]){
	       					point[j][0] = maxi+1;
       						point[j][1] = point[i][1];
       						j++;
       						dp[maxi+1][point[i][1]] = 1;
	       				}
	       				if (max1 > nums3[m] || !dp[point[i][0]][maxj+1]){
	       					point[j][0] = point[i][0];
       						point[j][1] = maxj+1;
       						j++;
       						dp[point[i][0]][maxj+1] = 1;
	       				}
	       				nums3[m] = max1;
	       			}
       			}
       			i ++;
       		}
       	}
        return nums3;
    }
};


[8,9,7,3,5,9,1,0,8,5,3,0,9,2,7,4,8,9,8,1,0,2,0,2,7,2,3,5,4,7,4,1,4,0,1,4,2,1,3,1,5,3,9,3,9,0,1,7,0,6,1,8,5,6,6,5,0,4,7,2,9,2,2,7,6,2,9,2,3,5,7,4,7,0,1,8,3,6,6,3,0,8,5,3,0,3,7,3,0,9,8,5,1,9,5,0,7,9,6,8,5,1,9,6,5,8,2,3,7,1,0,1,4,3,4,4,2,4,0,8,4,6,5,5,7,6,9,0,8,4,6,1,6,7,2,0,1,1,8,2,6,4,0,5,5,2,6,1,6,4,7,1,7,2,2,9,8,9,1,0,5,5,9,7,7,8,8,3,3,8,9,3,7,5,3,6,1,0,1,0,9,3,7,8,4,0,3,5,8,1,0,5,7,2,8,4,9,5,6,8,1,1,8,7,3,2,3,4,8,7,9,9,7,8,5,2,2,7,1,9,1,5,5,1,3,5,9,0,5,2,9,4,2,8,7,3,9,4,7,4,8,7,5,0,9,9,7,9,3,8,0,9,5,3,0,0,3,0,4,9,0,9,1,6,0,2,0,5,2,2,6,0,0,9,6,3,4,1,2,0,8,3,6,6,9,0,2,1,6,9,2,4,9,0,8,3,9,0,5,4,5,4,6,1,2,5,2,2,1,7,3,8,1,1,6,8,8,1,8,5,6,1,3,0,1,3,5,6,5,0,6,4,2,8,6,0,3,7,9,5,5,9,8,0,4,8,6,0,8,6,6,1,6,2,7,1,0,2,2,4,0,0,0,4,6,5,5,4,0,1,5,8,3,2,0,9,7,6,2,6,9,9,9,7,1,4,6,2,8,2,5,3,4,5,2,4,4,4,7,2,2,5,3,2,8,2,2,4,9,8,0,9,8,7,6,2,6,7,5,4,7,5,1,0,5,7,8,7,7,8,9,7,0,3,7,7,4,7,2,0,4,1,1,9,1,7,5,0,5,6,6,1,0,6,9,4,2,8,0,5,1,9,8,4,0,3,1,2,4,2,1,8,9,5,9,6,5,3,1,8,9,0,9,8,3,0,9,4,1,1,6,0,5,9,0,8,3,7,8,5]
[7,8,4,1,9,4,2,6,5,2,1,2,8,9,3,9,9,5,4,4,2,9,2,0,5,9,4,2,1,7,2,5,1,2,0,0,5,3,1,1,7,2,3,3,2,8,2,0,1,4,5,1,0,0,7,7,9,6,3,8,0,1,5,8,3,2,3,6,4,2,6,3,6,7,6,6,9,5,4,3,2,7,6,3,1,8,7,5,7,8,1,6,0,7,3,0,4,4,4,9,6,3,1,0,3,7,3,6,1,0,0,2,5,7,2,9,6,6,2,6,8,1,9,7,8,8,9,5,1,1,4,2,0,1,3,6,7,8,7,0,5,6,0,1,7,9,6,4,8,6,7,0,2,3,2,7,6,0,5,0,9,0,3,3,8,5,0,9,3,8,0,1,3,1,8,1,8,1,1,7,5,7,4,1,0,0,0,8,9,5,7,8,9,2,8,3,0,3,4,9,8,1,7,2,3,8,3,5,3,1,4,7,7,5,4,9,2,6,2,6,4,0,0,2,8,3,3,0,9,1,6,8,3,1,7,0,7,1,5,8,3,2,5,1,1,0,3,1,4,6,3,6,2,8,6,7,2,9,5,9,1,6,0,5,4,8,6,6,9,4,0,5,8,7,0,8,9,7,3,9,0,1,0,6,2,7,3,3,2,3,3,6,3,0,8,0,0,5,2,1,0,7,5,0,3,2,6,0,5,4,9,6,7,1,0,4,0,9,6,8,3,1,2,5,0,1,0,6,8,6,6,8,8,2,4,5,0,0,8,0,5,6,2,2,5,6,3,7,7,8,4,8,4,8,9,1,6,8,9,9,0,4,0,5,5,4,9,6,7,7,9,0,5,0,9,2,5,2,9,8,9,7,6,8,6,9,2,9,1,6,0,2,7,4,4,5,3,4,5,5,5,0,8,1,3,8,3,0,8,5,7,6,8,7,8,9,7,0,8,4,0,7,0,9,5,8,2,0,8,7,0,3,1,8,1,7,1,6,9,7,9,7,2,6,3,0,5,3,6,0,5,9,3,9,1,1,0,0,8,1,4,3,0,4,3,7,7,7,4,6,4,0,0,5,7,3,2,8,5,1,4,5,8,5,6,7,5,7,3,3,9,6,8,1,5,1,1,1,0,3]
500
